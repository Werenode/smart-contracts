/* Copyright (C) 2020-2021 Werenode SAS  */

archetype addressbook

variable admin : role = @tz1TQyYUuFbAroVARwhh5Fgqu2JE9HrvNi3a
variable admin_candidate : role = @tz1TQyYUuFbAroVARwhh5Fgqu2JE9HrvNi3a

asset evse {
  evse_id    : string;
  evse_addr  : address;
  evse_mng   : address;
  evse_owner : address;
}

asset evsemanager {
  mng_addr : address;
  mng_url  : string;
  mng_port : nat;
  evses    : aggregate<evse> = [];
}

asset owner {
  owner_addr  : address;
  owner_evses : aggregate<evse> = [];
}

asset whitelist {
  addr : address;
}

entry add_whitelist (iaddr : address) {
  called by admin
  effect {
    whitelist.add({ addr = iaddr})
  }
}

entry rm_whitelist (iaddr : address) {
  called by admin
  effect {
    whitelist.remove(iaddr);
  }
}

entry addupdate_evse (id     : string,
                      iaddr  : address,
                      imng   : address,
                      iurl   : string,
                      iport  : nat,
                      iowner : address) {
  require {
    r1 : whitelist.contains(caller)
  }
  effect {
    if evse.contains(id) then (
      evse.remove(id);
      evsemanager[imng].evses.remove(id);
      owner[iowner].owner_evses.remove(id);
    );
    evse.addupdate(id, { evse_addr = iaddr; evse_mng = imng; evse_owner = iowner });
    evsemanager.addupdate(imng, { mng_url = iurl; mng_port = iport; evses += [ id ] });
    owner.addupdate(iowner, { owner_evses += [ id ] })
  }
}

entry delete_evse (id : string) {
  require {
    r2 : whitelist.contains(caller) or caller = admin
  }
  effect {
    evsemanager[evse[id].evse_mng].evses.remove(id);
    owner[evse[id].evse_owner].owner_evses.remove(id);
    evse.remove(id);
  }
}

entry transfer_admin (pnew_admin : role) {
  called by admin
  effect {
    admin_candidate := pnew_admin;
  }
}

entry accept_admin () {
  called by admin_candidate
  effect {
    admin := admin_candidate
  }
}
