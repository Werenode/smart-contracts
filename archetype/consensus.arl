/* Copyright (C) 2020-2021 Werenode SAS  */

archetype consensus

variable admin : address = @tz1ZXf37ZNfVupt5GVyrPJ76q8kbjFuD2z7R

asset sig identified by id signatory {
   id : string;
   signatory : address;
   value : int;
}

asset sig_spec {
   sid : string;
   signatories : list<address>;
   dev : int; /* deviation toward avg. in nb. of percent */
   expiration : date;
   signatures : partition<sig> = [];
}

entry create_sig (i : string, s : list<address>, d : int) {
   called by admin
   effect {
      sig_spec.add({ sid = i; signatories = s; dev = d; expiration = (now + 1d) });
   }
}

function get_signatures(spid : string) : list<address * int> {
   var l : list<address * int> = [];
   for s in sig_spec[spid].signatures do
      l := prepend(l, (sig[s].signatory, sig[s].value));
   done;
   return l
}

function check_sig_data(spid : string) : bool {
   var avg = sig_spec[spid].signatures.sum(value) / sig_spec[spid].signatures.count();
   var min = (1 - sig_spec[spid].dev / 200) * avg;
   var max = (1 + sig_spec[spid].dev / 200) * avg;
   var check = true;
   for s in sig_spec[spid].signatures do
      check &= min <= sig[s].value <= max
   done;
   return check
}

entry consensus (spid : string, l : list<address * int>, d : int) {
   called by selfaddress
   effect { () }
}

entry failed (spid : string, l : list<address * int>, d : int) {
   called by selfaddress
   effect { () }
}

entry sign (spid : string, v : int) {
   require {
      r0 : contains(sig_spec[spid].signatories, caller);
   }
   effect {
      sig_spec[spid].signatures.add({spid; caller; v });
      if sig_spec[spid].signatures.count() = length (sig_spec[spid].signatories) then (
         if check_sig_data (spid) then
            transfer 0tz to entry self.consensus(spid, get_signatures(spid), sig_spec[spid].dev)
         else
            transfer 0tz to entry self.failed(spid, get_signatures(spid), sig_spec[spid].dev);
         sig_spec.remove(spid);
      );
   }
}

entry clear_expired () {
   called by admin
   effect {
      sig_spec.select(the.expiration < now).clear();
   }
}
