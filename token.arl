archetype token

constant total : int = 1000000
with {
  i0: total > 0
}

asset allowance {
  user        : address;
  evse_server : address;
  amount      : int;
} with {
  i2 : amount > 0;
}

asset tokenHolder identified by holder {
  holder     : address;
  tokens     : int = 0;
} with {
  i1: tokens >= 0;
} initialized by {
  { holder = caller; tokens = total }
}

entry dotransfer (dest : pkey of tokenHolder, value : int) {

  specification {
    p1 : before.tokenHolder.sum(tokens) = tokenHolder.sum(tokens);
    p2 : let some th = tokenHolder.get(dest) in
         let some bth = before.tokenHolder.get(dest) in
         th.tokens = bth.tokens + value
         otherwise true
         otherwise true;
    p3 : let some thc = tokenHolder.get(caller) in
         let some bthc = before.tokenHolder.get(caller) in
         thc.tokens = bthc.tokens - value
         otherwise true
         otherwise true;
    p4 : let some th = tokenHolder.get(dest) in
         forall t in tokenHolder,
         forall bt in before.tokenHolder,
         t.holder <> th.holder ->
         t.holder <> caller ->
         t.tokens = bt.tokens
         otherwise true;
  }

  failif {
    f0 : value < 0;
    f1 : tokenHolder[caller].tokens < value
  }

  effect {
    tokenHolder.addupdate( dest, { tokens += value });
    tokenHolder.update( caller, { tokens -= value })
  }
}

entry approve(spender : address, value : int) {
  require {
    d1 : tokenHolder[caller].tokens >= value;
  }
  failif {
    f2 : value <= 0;
  }
  effect {
    allowance.addupdate(caller, { evse_server = spender; amount = value });
  }
}

entry transferFrom(from_ : address, to_ : address, value : int) {
  require {
    (* d1: allowance.contains(from_); *)
    d2: allowance[from_].evse_server = caller;
    d3: allowance[from_].amount >= value;
  }

  failif {
    f3 : value < 0;
    f4 : tokenHolder[from_].tokens < value
  }

  effect {
    (* update allowance *)
    allowance.update(from_, {amount = 0});

    (* update token *)
    tokenHolder.addupdate(to_,   { tokens += value });
    tokenHolder.update(from_, { tokens -= value });
  }
}
