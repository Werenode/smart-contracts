/* Copyright (C) 2020 Werenode SAS  */

archetype switch

variable owner : address = @tz1XZ7s6uStC2hZVpPQhXgcdXPwxifByF3Ao

variable interruption : date = 2020-06-18

variable rate : rational = 1.2 // in time_unit / tez_unit

variable time_unit : duration = 1h
variable tez_unit : tez = 1tz

variable user : option<address> = none

variable read_interval : duration = 5s

// UTILS

function get_rate_in_s_by_utz () : rational {
    var d : int = time_unit;
    var t : nat = tez_unit;
    return (rate * d / t)
}

function get_return_tz () : tez {
    var res : int = 1 / get_rate_in_s_by_utz() * (interruption - now);
    return (res * 1utz)
}

// ENTRIES
entry start () {
    require {
        r1: now > interruption;
    }
    effect {
        var t : nat = transferred;
        var dur : duration = (get_rate_in_s_by_utz() * t)*1s;
        if dur > read_interval then (
            interruption := now + dur + read_interval;
            user := some(caller)
        )
    }
}

entry interrupt () {
    require {
        r2: caller = opt_get(user) and now < interruption
    }
    effect {
        transfer (get_return_tz()) to caller;
        interruption := now - read_interval;
    }
}

entry collect () {
    called by owner
    effect {
        var keep = 0tz;
        if now < interruption then
            keep := get_return_tz();
        if balance - keep > 0tz then
            transfer (balance - keep) to owner
    }
}

entry setunits (dunit : duration, tunit : tez) {
    called by owner
    effect {
        time_unit := dunit;
        tez_unit := tunit;
    }
}
